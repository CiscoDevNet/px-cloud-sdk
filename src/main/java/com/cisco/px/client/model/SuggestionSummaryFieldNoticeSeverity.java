/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.cisco.px.client.model.SuggestionSummaryFieldNoticeSeverityExposed;
import com.cisco.px.client.model.SuggestionSummaryFieldNoticeSeverityFixed;
import com.cisco.px.client.model.SuggestionSummaryFieldNoticeSeverityNewExposed;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * Number of field notices the current Cisco software releases are exposed to that are addressed by the suggested release
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SuggestionSummaryFieldNoticeSeverity {
  public static final String SERIALIZED_NAME_EXPOSED = "Exposed";
  @SerializedName(SERIALIZED_NAME_EXPOSED)
  private SuggestionSummaryFieldNoticeSeverityExposed exposed;

  public static final String SERIALIZED_NAME_NEW_EXPOSED = "New_Exposed";
  @SerializedName(SERIALIZED_NAME_NEW_EXPOSED)
  private SuggestionSummaryFieldNoticeSeverityNewExposed newExposed;

  public static final String SERIALIZED_NAME_FIXED = "Fixed";
  @SerializedName(SERIALIZED_NAME_FIXED)
  private SuggestionSummaryFieldNoticeSeverityFixed fixed;

  public SuggestionSummaryFieldNoticeSeverity() {
  }

  public SuggestionSummaryFieldNoticeSeverity exposed(SuggestionSummaryFieldNoticeSeverityExposed exposed) {
    this.exposed = exposed;
    return this;
  }

   /**
   * Get exposed
   * @return exposed
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryFieldNoticeSeverityExposed getExposed() {
    return exposed;
  }

  public void setExposed(SuggestionSummaryFieldNoticeSeverityExposed exposed) {
    this.exposed = exposed;
  }


  public SuggestionSummaryFieldNoticeSeverity newExposed(SuggestionSummaryFieldNoticeSeverityNewExposed newExposed) {
    this.newExposed = newExposed;
    return this;
  }

   /**
   * Get newExposed
   * @return newExposed
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryFieldNoticeSeverityNewExposed getNewExposed() {
    return newExposed;
  }

  public void setNewExposed(SuggestionSummaryFieldNoticeSeverityNewExposed newExposed) {
    this.newExposed = newExposed;
  }


  public SuggestionSummaryFieldNoticeSeverity fixed(SuggestionSummaryFieldNoticeSeverityFixed fixed) {
    this.fixed = fixed;
    return this;
  }

   /**
   * Get fixed
   * @return fixed
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryFieldNoticeSeverityFixed getFixed() {
    return fixed;
  }

  public void setFixed(SuggestionSummaryFieldNoticeSeverityFixed fixed) {
    this.fixed = fixed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionSummaryFieldNoticeSeverity suggestionSummaryFieldNoticeSeverity = (SuggestionSummaryFieldNoticeSeverity) o;
    return Objects.equals(this.exposed, suggestionSummaryFieldNoticeSeverity.exposed) &&
        Objects.equals(this.newExposed, suggestionSummaryFieldNoticeSeverity.newExposed) &&
        Objects.equals(this.fixed, suggestionSummaryFieldNoticeSeverity.fixed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exposed, newExposed, fixed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionSummaryFieldNoticeSeverity {\n");
    sb.append("    exposed: ").append(toIndentedString(exposed)).append("\n");
    sb.append("    newExposed: ").append(toIndentedString(newExposed)).append("\n");
    sb.append("    fixed: ").append(toIndentedString(fixed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Exposed");
    openapiFields.add("New_Exposed");
    openapiFields.add("Fixed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SuggestionSummaryFieldNoticeSeverity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestionSummaryFieldNoticeSeverity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionSummaryFieldNoticeSeverity is not found in the empty JSON string", SuggestionSummaryFieldNoticeSeverity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestionSummaryFieldNoticeSeverity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionSummaryFieldNoticeSeverity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Exposed`
      if (jsonObj.get("Exposed") != null && !jsonObj.get("Exposed").isJsonNull()) {
        SuggestionSummaryFieldNoticeSeverityExposed.validateJsonElement(jsonObj.get("Exposed"));
      }
      // validate the optional field `New_Exposed`
      if (jsonObj.get("New_Exposed") != null && !jsonObj.get("New_Exposed").isJsonNull()) {
        SuggestionSummaryFieldNoticeSeverityNewExposed.validateJsonElement(jsonObj.get("New_Exposed"));
      }
      // validate the optional field `Fixed`
      if (jsonObj.get("Fixed") != null && !jsonObj.get("Fixed").isJsonNull()) {
        SuggestionSummaryFieldNoticeSeverityFixed.validateJsonElement(jsonObj.get("Fixed"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionSummaryFieldNoticeSeverity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionSummaryFieldNoticeSeverity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionSummaryFieldNoticeSeverity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionSummaryFieldNoticeSeverity.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionSummaryFieldNoticeSeverity>() {
           @Override
           public void write(JsonWriter out, SuggestionSummaryFieldNoticeSeverity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionSummaryFieldNoticeSeverity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuggestionSummaryFieldNoticeSeverity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuggestionSummaryFieldNoticeSeverity
  * @throws IOException if the JSON string is invalid with respect to SuggestionSummaryFieldNoticeSeverity
  */
  public static SuggestionSummaryFieldNoticeSeverity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionSummaryFieldNoticeSeverity.class);
  }

 /**
  * Convert an instance of SuggestionSummaryFieldNoticeSeverity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

