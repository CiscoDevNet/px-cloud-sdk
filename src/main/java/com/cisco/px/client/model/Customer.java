/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.cisco.px.client.model.SuccessTracks;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * Customer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Customer {
  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customerName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  private String customerName;

  public static final String SERIALIZED_NAME_CUSTOMER_G_U_NAME = "customerGUName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_G_U_NAME)
  private String customerGUName;

  public static final String SERIALIZED_NAME_SUCCESS_TRACKS = "successTracks";
  @SerializedName(SERIALIZED_NAME_SUCCESS_TRACKS)
  private List<SuccessTracks> successTracks;

  public Customer() {
  }

  public Customer customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

   /**
   * Get customerId
   * @return customerId
  **/
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Customer customerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

   /**
   * Get customerName
   * @return customerName
  **/
  @javax.annotation.Nullable
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(String customerName) {
    this.customerName = customerName;
  }


  public Customer customerGUName(String customerGUName) {
    this.customerGUName = customerGUName;
    return this;
  }

   /**
   * Get customerGUName
   * @return customerGUName
  **/
  @javax.annotation.Nullable
  public String getCustomerGUName() {
    return customerGUName;
  }

  public void setCustomerGUName(String customerGUName) {
    this.customerGUName = customerGUName;
  }


  public Customer successTracks(List<SuccessTracks> successTracks) {
    this.successTracks = successTracks;
    return this;
  }

  public Customer addSuccessTracksItem(SuccessTracks successTracksItem) {
    if (this.successTracks == null) {
      this.successTracks = new ArrayList<>();
    }
    this.successTracks.add(successTracksItem);
    return this;
  }

   /**
   * Get successTracks
   * @return successTracks
  **/
  @javax.annotation.Nullable
  public List<SuccessTracks> getSuccessTracks() {
    return successTracks;
  }

  public void setSuccessTracks(List<SuccessTracks> successTracks) {
    this.successTracks = successTracks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.customerId, customer.customerId) &&
        Objects.equals(this.customerName, customer.customerName) &&
        Objects.equals(this.customerGUName, customer.customerGUName) &&
        Objects.equals(this.successTracks, customer.successTracks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerId, customerName, customerGUName, successTracks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    customerGUName: ").append(toIndentedString(customerGUName)).append("\n");
    sb.append("    successTracks: ").append(toIndentedString(successTracks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerId");
    openapiFields.add("customerName");
    openapiFields.add("customerGUName");
    openapiFields.add("successTracks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Customer
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("customerName") != null && !jsonObj.get("customerName").isJsonNull()) && !jsonObj.get("customerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerName").toString()));
      }
      if ((jsonObj.get("customerGUName") != null && !jsonObj.get("customerGUName").isJsonNull()) && !jsonObj.get("customerGUName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerGUName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerGUName").toString()));
      }
      if (jsonObj.get("successTracks") != null && !jsonObj.get("successTracks").isJsonNull()) {
        JsonArray jsonArraysuccessTracks = jsonObj.getAsJsonArray("successTracks");
        if (jsonArraysuccessTracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("successTracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `successTracks` to be an array in the JSON string but got `%s`", jsonObj.get("successTracks").toString()));
          }

          // validate the optional field `successTracks` (array)
          for (int i = 0; i < jsonArraysuccessTracks.size(); i++) {
            SuccessTracks.validateJsonElement(jsonArraysuccessTracks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Customer
  * @throws IOException if the JSON string is invalid with respect to Customer
  */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

 /**
  * Convert an instance of Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

