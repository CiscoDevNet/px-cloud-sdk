/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * LicensesResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class LicensesResponseDTO {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_LICENSE_LEVEL = "licenseLevel";
  @SerializedName(SERIALIZED_NAME_LICENSE_LEVEL)
  private String licenseLevel;

  public static final String SERIALIZED_NAME_LICENSE_NUMBER = "licenseNumber";
  @SerializedName(SERIALIZED_NAME_LICENSE_NUMBER)
  private String licenseNumber;

  public static final String SERIALIZED_NAME_PRODUCT_FAMILY = "productFamily";
  @SerializedName(SERIALIZED_NAME_PRODUCT_FAMILY)
  private String productFamily;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_I_D = "subscriptionID";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_I_D)
  private String subscriptionID;

  public LicensesResponseDTO() {
  }

  public LicensesResponseDTO endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public LicensesResponseDTO licenseLevel(String licenseLevel) {
    this.licenseLevel = licenseLevel;
    return this;
  }

   /**
   * Get licenseLevel
   * @return licenseLevel
  **/
  @javax.annotation.Nullable
  public String getLicenseLevel() {
    return licenseLevel;
  }

  public void setLicenseLevel(String licenseLevel) {
    this.licenseLevel = licenseLevel;
  }


  public LicensesResponseDTO licenseNumber(String licenseNumber) {
    this.licenseNumber = licenseNumber;
    return this;
  }

   /**
   * Get licenseNumber
   * @return licenseNumber
  **/
  @javax.annotation.Nullable
  public String getLicenseNumber() {
    return licenseNumber;
  }

  public void setLicenseNumber(String licenseNumber) {
    this.licenseNumber = licenseNumber;
  }


  public LicensesResponseDTO productFamily(String productFamily) {
    this.productFamily = productFamily;
    return this;
  }

   /**
   * Get productFamily
   * @return productFamily
  **/
  @javax.annotation.Nullable
  public String getProductFamily() {
    return productFamily;
  }

  public void setProductFamily(String productFamily) {
    this.productFamily = productFamily;
  }


  public LicensesResponseDTO quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public LicensesResponseDTO subscriptionID(String subscriptionID) {
    this.subscriptionID = subscriptionID;
    return this;
  }

   /**
   * Get subscriptionID
   * @return subscriptionID
  **/
  @javax.annotation.Nullable
  public String getSubscriptionID() {
    return subscriptionID;
  }

  public void setSubscriptionID(String subscriptionID) {
    this.subscriptionID = subscriptionID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicensesResponseDTO licensesResponseDTO = (LicensesResponseDTO) o;
    return Objects.equals(this.endDate, licensesResponseDTO.endDate) &&
        Objects.equals(this.licenseLevel, licensesResponseDTO.licenseLevel) &&
        Objects.equals(this.licenseNumber, licensesResponseDTO.licenseNumber) &&
        Objects.equals(this.productFamily, licensesResponseDTO.productFamily) &&
        Objects.equals(this.quantity, licensesResponseDTO.quantity) &&
        Objects.equals(this.subscriptionID, licensesResponseDTO.subscriptionID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, licenseLevel, licenseNumber, productFamily, quantity, subscriptionID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicensesResponseDTO {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    licenseLevel: ").append(toIndentedString(licenseLevel)).append("\n");
    sb.append("    licenseNumber: ").append(toIndentedString(licenseNumber)).append("\n");
    sb.append("    productFamily: ").append(toIndentedString(productFamily)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    subscriptionID: ").append(toIndentedString(subscriptionID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("licenseLevel");
    openapiFields.add("licenseNumber");
    openapiFields.add("productFamily");
    openapiFields.add("quantity");
    openapiFields.add("subscriptionID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LicensesResponseDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicensesResponseDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicensesResponseDTO is not found in the empty JSON string", LicensesResponseDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicensesResponseDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicensesResponseDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("licenseLevel") != null && !jsonObj.get("licenseLevel").isJsonNull()) && !jsonObj.get("licenseLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseLevel").toString()));
      }
      if ((jsonObj.get("licenseNumber") != null && !jsonObj.get("licenseNumber").isJsonNull()) && !jsonObj.get("licenseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseNumber").toString()));
      }
      if ((jsonObj.get("productFamily") != null && !jsonObj.get("productFamily").isJsonNull()) && !jsonObj.get("productFamily").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productFamily` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productFamily").toString()));
      }
      if ((jsonObj.get("subscriptionID") != null && !jsonObj.get("subscriptionID").isJsonNull()) && !jsonObj.get("subscriptionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicensesResponseDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicensesResponseDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicensesResponseDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicensesResponseDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<LicensesResponseDTO>() {
           @Override
           public void write(JsonWriter out, LicensesResponseDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicensesResponseDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LicensesResponseDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LicensesResponseDTO
  * @throws IOException if the JSON string is invalid with respect to LicensesResponseDTO
  */
  public static LicensesResponseDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicensesResponseDTO.class);
  }

 /**
  * Convert an instance of LicensesResponseDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

