/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SoftwareGroupBugs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SoftwareGroupBugs {
  public static final String SERIALIZED_NAME_BUG_ID = "bugId";
  @SerializedName(SERIALIZED_NAME_BUG_ID)
  private String bugId;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_AFFECTED_ASSETS = "affectedAssets";
  @SerializedName(SERIALIZED_NAME_AFFECTED_ASSETS)
  private String affectedAssets;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private String features;

  public SoftwareGroupBugs() {
  }

  public SoftwareGroupBugs bugId(String bugId) {
    this.bugId = bugId;
    return this;
  }

   /**
   * Unique identifier of the bug
   * @return bugId
  **/
  @javax.annotation.Nullable
  public String getBugId() {
    return bugId;
  }

  public void setBugId(String bugId) {
    this.bugId = bugId;
  }


  public SoftwareGroupBugs severity(String severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Severity level of the bug. Can be High, Medium, or Low.
   * @return severity
  **/
  @javax.annotation.Nullable
  public String getSeverity() {
    return severity;
  }

  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public SoftwareGroupBugs status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the bug. Can be Exposed or Not Exposed.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SoftwareGroupBugs title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the bug. For example, CiscoBug-2020-x8k2, or Cisco IOS XE Software Command Injection Vulnerability.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SoftwareGroupBugs affectedAssets(String affectedAssets) {
    this.affectedAssets = affectedAssets;
    return this;
  }

   /**
   * Number of assets affected by the bug.
   * @return affectedAssets
  **/
  @javax.annotation.Nullable
  public String getAffectedAssets() {
    return affectedAssets;
  }

  public void setAffectedAssets(String affectedAssets) {
    this.affectedAssets = affectedAssets;
  }


  public SoftwareGroupBugs features(String features) {
    this.features = features;
    return this;
  }

   /**
   * Number of features affected by the bug.
   * @return features
  **/
  @javax.annotation.Nullable
  public String getFeatures() {
    return features;
  }

  public void setFeatures(String features) {
    this.features = features;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareGroupBugs softwareGroupBugs = (SoftwareGroupBugs) o;
    return Objects.equals(this.bugId, softwareGroupBugs.bugId) &&
        Objects.equals(this.severity, softwareGroupBugs.severity) &&
        Objects.equals(this.status, softwareGroupBugs.status) &&
        Objects.equals(this.title, softwareGroupBugs.title) &&
        Objects.equals(this.affectedAssets, softwareGroupBugs.affectedAssets) &&
        Objects.equals(this.features, softwareGroupBugs.features);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bugId, severity, status, title, affectedAssets, features);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareGroupBugs {\n");
    sb.append("    bugId: ").append(toIndentedString(bugId)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    affectedAssets: ").append(toIndentedString(affectedAssets)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bugId");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("affectedAssets");
    openapiFields.add("features");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SoftwareGroupBugs
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareGroupBugs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareGroupBugs is not found in the empty JSON string", SoftwareGroupBugs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareGroupBugs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareGroupBugs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bugId") != null && !jsonObj.get("bugId").isJsonNull()) && !jsonObj.get("bugId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bugId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bugId").toString()));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("affectedAssets") != null && !jsonObj.get("affectedAssets").isJsonNull()) && !jsonObj.get("affectedAssets").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedAssets` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedAssets").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareGroupBugs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareGroupBugs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareGroupBugs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareGroupBugs.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareGroupBugs>() {
           @Override
           public void write(JsonWriter out, SoftwareGroupBugs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareGroupBugs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SoftwareGroupBugs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SoftwareGroupBugs
  * @throws IOException if the JSON string is invalid with respect to SoftwareGroupBugs
  */
  public static SoftwareGroupBugs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareGroupBugs.class);
  }

 /**
  * Convert an instance of SoftwareGroupBugs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

