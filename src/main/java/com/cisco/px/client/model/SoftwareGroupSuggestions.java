/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.cisco.px.client.model.ReleaseSummary;
import com.cisco.px.client.model.SoftwareGroupRisk;
import com.cisco.px.client.model.SuggestionSummary;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SoftwareGroupSuggestions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SoftwareGroupSuggestions {
  public static final String SERIALIZED_NAME_SUGGESTIONS_INTERVAL = "suggestionsInterval";
  @SerializedName(SERIALIZED_NAME_SUGGESTIONS_INTERVAL)
  private String suggestionsInterval;

  public static final String SERIALIZED_NAME_SUGGESTION_UPDATED_DATE = "suggestionUpdatedDate";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_UPDATED_DATE)
  private LocalDate suggestionUpdatedDate;

  public static final String SERIALIZED_NAME_SUGGESTION_SELECTED_DATE = "suggestionSelectedDate";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_SELECTED_DATE)
  private LocalDate suggestionSelectedDate;

  public static final String SERIALIZED_NAME_RELEASE_SUMMARY = "releaseSummary";
  @SerializedName(SERIALIZED_NAME_RELEASE_SUMMARY)
  private List<ReleaseSummary> releaseSummary;

  public static final String SERIALIZED_NAME_SUGGESTION_SUMMARIES = "suggestionSummaries";
  @SerializedName(SERIALIZED_NAME_SUGGESTION_SUMMARIES)
  private List<SuggestionSummary> suggestionSummaries;

  public static final String SERIALIZED_NAME_SOFTWARE_GROUP_RISK_TREND = "softwareGroupRiskTrend";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_GROUP_RISK_TREND)
  private List<SoftwareGroupRisk> softwareGroupRiskTrend;

  public SoftwareGroupSuggestions() {
  }

  public SoftwareGroupSuggestions suggestionsInterval(String suggestionsInterval) {
    this.suggestionsInterval = suggestionsInterval;
    return this;
  }

   /**
   * How often, in months, Cisco software release suggestions will be provided. The customer can configure this value in CX Cloud.
   * @return suggestionsInterval
  **/
  @javax.annotation.Nullable
  public String getSuggestionsInterval() {
    return suggestionsInterval;
  }

  public void setSuggestionsInterval(String suggestionsInterval) {
    this.suggestionsInterval = suggestionsInterval;
  }


  public SoftwareGroupSuggestions suggestionUpdatedDate(LocalDate suggestionUpdatedDate) {
    this.suggestionUpdatedDate = suggestionUpdatedDate;
    return this;
  }

   /**
   * Date the machine learning suggestions were updated for the Software Group
   * @return suggestionUpdatedDate
  **/
  @javax.annotation.Nullable
  public LocalDate getSuggestionUpdatedDate() {
    return suggestionUpdatedDate;
  }

  public void setSuggestionUpdatedDate(LocalDate suggestionUpdatedDate) {
    this.suggestionUpdatedDate = suggestionUpdatedDate;
  }


  public SoftwareGroupSuggestions suggestionSelectedDate(LocalDate suggestionSelectedDate) {
    this.suggestionSelectedDate = suggestionSelectedDate;
    return this;
  }

   /**
   * Date the customer selected a suggested Cisco software release in CX Cloud
   * @return suggestionSelectedDate
  **/
  @javax.annotation.Nullable
  public LocalDate getSuggestionSelectedDate() {
    return suggestionSelectedDate;
  }

  public void setSuggestionSelectedDate(LocalDate suggestionSelectedDate) {
    this.suggestionSelectedDate = suggestionSelectedDate;
  }


  public SoftwareGroupSuggestions releaseSummary(List<ReleaseSummary> releaseSummary) {
    this.releaseSummary = releaseSummary;
    return this;
  }

  public SoftwareGroupSuggestions addReleaseSummaryItem(ReleaseSummary releaseSummaryItem) {
    if (this.releaseSummary == null) {
      this.releaseSummary = new ArrayList<>();
    }
    this.releaseSummary.add(releaseSummaryItem);
    return this;
  }

   /**
   * List of the following Cisco software releases for the Software Group - • Latest release available from Cisco Software Central • Suggested releases • Cisco DNA Center golden release • Cisco DNA Center Compatibility Matrix minimum release
   * @return releaseSummary
  **/
  @javax.annotation.Nullable
  public List<ReleaseSummary> getReleaseSummary() {
    return releaseSummary;
  }

  public void setReleaseSummary(List<ReleaseSummary> releaseSummary) {
    this.releaseSummary = releaseSummary;
  }


  public SoftwareGroupSuggestions suggestionSummaries(List<SuggestionSummary> suggestionSummaries) {
    this.suggestionSummaries = suggestionSummaries;
    return this;
  }

  public SoftwareGroupSuggestions addSuggestionSummariesItem(SuggestionSummary suggestionSummariesItem) {
    if (this.suggestionSummaries == null) {
      this.suggestionSummaries = new ArrayList<>();
    }
    this.suggestionSummaries.add(suggestionSummariesItem);
    return this;
  }

   /**
   * Information about the Cisco software releases running on, and suggested for, the assets in the Software Group
   * @return suggestionSummaries
  **/
  @javax.annotation.Nullable
  public List<SuggestionSummary> getSuggestionSummaries() {
    return suggestionSummaries;
  }

  public void setSuggestionSummaries(List<SuggestionSummary> suggestionSummaries) {
    this.suggestionSummaries = suggestionSummaries;
  }


  public SoftwareGroupSuggestions softwareGroupRiskTrend(List<SoftwareGroupRisk> softwareGroupRiskTrend) {
    this.softwareGroupRiskTrend = softwareGroupRiskTrend;
    return this;
  }

  public SoftwareGroupSuggestions addSoftwareGroupRiskTrendItem(SoftwareGroupRisk softwareGroupRiskTrendItem) {
    if (this.softwareGroupRiskTrend == null) {
      this.softwareGroupRiskTrend = new ArrayList<>();
    }
    this.softwareGroupRiskTrend.add(softwareGroupRiskTrendItem);
    return this;
  }

   /**
   * List of weekly risk scores for the current Cisco software releases calculated over a period of time
   * @return softwareGroupRiskTrend
  **/
  @javax.annotation.Nullable
  public List<SoftwareGroupRisk> getSoftwareGroupRiskTrend() {
    return softwareGroupRiskTrend;
  }

  public void setSoftwareGroupRiskTrend(List<SoftwareGroupRisk> softwareGroupRiskTrend) {
    this.softwareGroupRiskTrend = softwareGroupRiskTrend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareGroupSuggestions softwareGroupSuggestions = (SoftwareGroupSuggestions) o;
    return Objects.equals(this.suggestionsInterval, softwareGroupSuggestions.suggestionsInterval) &&
        Objects.equals(this.suggestionUpdatedDate, softwareGroupSuggestions.suggestionUpdatedDate) &&
        Objects.equals(this.suggestionSelectedDate, softwareGroupSuggestions.suggestionSelectedDate) &&
        Objects.equals(this.releaseSummary, softwareGroupSuggestions.releaseSummary) &&
        Objects.equals(this.suggestionSummaries, softwareGroupSuggestions.suggestionSummaries) &&
        Objects.equals(this.softwareGroupRiskTrend, softwareGroupSuggestions.softwareGroupRiskTrend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(suggestionsInterval, suggestionUpdatedDate, suggestionSelectedDate, releaseSummary, suggestionSummaries, softwareGroupRiskTrend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareGroupSuggestions {\n");
    sb.append("    suggestionsInterval: ").append(toIndentedString(suggestionsInterval)).append("\n");
    sb.append("    suggestionUpdatedDate: ").append(toIndentedString(suggestionUpdatedDate)).append("\n");
    sb.append("    suggestionSelectedDate: ").append(toIndentedString(suggestionSelectedDate)).append("\n");
    sb.append("    releaseSummary: ").append(toIndentedString(releaseSummary)).append("\n");
    sb.append("    suggestionSummaries: ").append(toIndentedString(suggestionSummaries)).append("\n");
    sb.append("    softwareGroupRiskTrend: ").append(toIndentedString(softwareGroupRiskTrend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("suggestionsInterval");
    openapiFields.add("suggestionUpdatedDate");
    openapiFields.add("suggestionSelectedDate");
    openapiFields.add("releaseSummary");
    openapiFields.add("suggestionSummaries");
    openapiFields.add("softwareGroupRiskTrend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SoftwareGroupSuggestions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareGroupSuggestions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareGroupSuggestions is not found in the empty JSON string", SoftwareGroupSuggestions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareGroupSuggestions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareGroupSuggestions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("suggestionsInterval") != null && !jsonObj.get("suggestionsInterval").isJsonNull()) && !jsonObj.get("suggestionsInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suggestionsInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suggestionsInterval").toString()));
      }
      if (jsonObj.get("releaseSummary") != null && !jsonObj.get("releaseSummary").isJsonNull()) {
        JsonArray jsonArrayreleaseSummary = jsonObj.getAsJsonArray("releaseSummary");
        if (jsonArrayreleaseSummary != null) {
          // ensure the json data is an array
          if (!jsonObj.get("releaseSummary").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `releaseSummary` to be an array in the JSON string but got `%s`", jsonObj.get("releaseSummary").toString()));
          }

          // validate the optional field `releaseSummary` (array)
          for (int i = 0; i < jsonArrayreleaseSummary.size(); i++) {
            ReleaseSummary.validateJsonElement(jsonArrayreleaseSummary.get(i));
          };
        }
      }
      if (jsonObj.get("suggestionSummaries") != null && !jsonObj.get("suggestionSummaries").isJsonNull()) {
        JsonArray jsonArraysuggestionSummaries = jsonObj.getAsJsonArray("suggestionSummaries");
        if (jsonArraysuggestionSummaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suggestionSummaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suggestionSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("suggestionSummaries").toString()));
          }

          // validate the optional field `suggestionSummaries` (array)
          for (int i = 0; i < jsonArraysuggestionSummaries.size(); i++) {
            SuggestionSummary.validateJsonElement(jsonArraysuggestionSummaries.get(i));
          };
        }
      }
      if (jsonObj.get("softwareGroupRiskTrend") != null && !jsonObj.get("softwareGroupRiskTrend").isJsonNull()) {
        JsonArray jsonArraysoftwareGroupRiskTrend = jsonObj.getAsJsonArray("softwareGroupRiskTrend");
        if (jsonArraysoftwareGroupRiskTrend != null) {
          // ensure the json data is an array
          if (!jsonObj.get("softwareGroupRiskTrend").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `softwareGroupRiskTrend` to be an array in the JSON string but got `%s`", jsonObj.get("softwareGroupRiskTrend").toString()));
          }

          // validate the optional field `softwareGroupRiskTrend` (array)
          for (int i = 0; i < jsonArraysoftwareGroupRiskTrend.size(); i++) {
            SoftwareGroupRisk.validateJsonElement(jsonArraysoftwareGroupRiskTrend.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareGroupSuggestions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareGroupSuggestions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareGroupSuggestions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareGroupSuggestions.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareGroupSuggestions>() {
           @Override
           public void write(JsonWriter out, SoftwareGroupSuggestions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareGroupSuggestions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SoftwareGroupSuggestions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SoftwareGroupSuggestions
  * @throws IOException if the JSON string is invalid with respect to SoftwareGroupSuggestions
  */
  public static SoftwareGroupSuggestions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareGroupSuggestions.class);
  }

 /**
  * Convert an instance of SoftwareGroupSuggestions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

