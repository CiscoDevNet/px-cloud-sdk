/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SuggestionSummaryFeaturesCount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SuggestionSummaryFeaturesCount {
  public static final String SERIALIZED_NAME_ACTIVE_FEATURES_COUNT = "activeFeaturesCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_FEATURES_COUNT)
  private Integer activeFeaturesCount;

  public static final String SERIALIZED_NAME_AFFECTED_FEATURES_COUNT = "affectedFeaturesCount";
  @SerializedName(SERIALIZED_NAME_AFFECTED_FEATURES_COUNT)
  private Integer affectedFeaturesCount;

  public static final String SERIALIZED_NAME_FIXED_FEATURES_COUNT = "fixedFeaturesCount";
  @SerializedName(SERIALIZED_NAME_FIXED_FEATURES_COUNT)
  private Integer fixedFeaturesCount;

  public SuggestionSummaryFeaturesCount() {
  }

  public SuggestionSummaryFeaturesCount activeFeaturesCount(Integer activeFeaturesCount) {
    this.activeFeaturesCount = activeFeaturesCount;
    return this;
  }

   /**
   * Get activeFeaturesCount
   * @return activeFeaturesCount
  **/
  @javax.annotation.Nullable
  public Integer getActiveFeaturesCount() {
    return activeFeaturesCount;
  }

  public void setActiveFeaturesCount(Integer activeFeaturesCount) {
    this.activeFeaturesCount = activeFeaturesCount;
  }


  public SuggestionSummaryFeaturesCount affectedFeaturesCount(Integer affectedFeaturesCount) {
    this.affectedFeaturesCount = affectedFeaturesCount;
    return this;
  }

   /**
   * Get affectedFeaturesCount
   * @return affectedFeaturesCount
  **/
  @javax.annotation.Nullable
  public Integer getAffectedFeaturesCount() {
    return affectedFeaturesCount;
  }

  public void setAffectedFeaturesCount(Integer affectedFeaturesCount) {
    this.affectedFeaturesCount = affectedFeaturesCount;
  }


  public SuggestionSummaryFeaturesCount fixedFeaturesCount(Integer fixedFeaturesCount) {
    this.fixedFeaturesCount = fixedFeaturesCount;
    return this;
  }

   /**
   * Get fixedFeaturesCount
   * @return fixedFeaturesCount
  **/
  @javax.annotation.Nullable
  public Integer getFixedFeaturesCount() {
    return fixedFeaturesCount;
  }

  public void setFixedFeaturesCount(Integer fixedFeaturesCount) {
    this.fixedFeaturesCount = fixedFeaturesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionSummaryFeaturesCount suggestionSummaryFeaturesCount = (SuggestionSummaryFeaturesCount) o;
    return Objects.equals(this.activeFeaturesCount, suggestionSummaryFeaturesCount.activeFeaturesCount) &&
        Objects.equals(this.affectedFeaturesCount, suggestionSummaryFeaturesCount.affectedFeaturesCount) &&
        Objects.equals(this.fixedFeaturesCount, suggestionSummaryFeaturesCount.fixedFeaturesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeFeaturesCount, affectedFeaturesCount, fixedFeaturesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionSummaryFeaturesCount {\n");
    sb.append("    activeFeaturesCount: ").append(toIndentedString(activeFeaturesCount)).append("\n");
    sb.append("    affectedFeaturesCount: ").append(toIndentedString(affectedFeaturesCount)).append("\n");
    sb.append("    fixedFeaturesCount: ").append(toIndentedString(fixedFeaturesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeFeaturesCount");
    openapiFields.add("affectedFeaturesCount");
    openapiFields.add("fixedFeaturesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SuggestionSummaryFeaturesCount
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestionSummaryFeaturesCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionSummaryFeaturesCount is not found in the empty JSON string", SuggestionSummaryFeaturesCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestionSummaryFeaturesCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionSummaryFeaturesCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionSummaryFeaturesCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionSummaryFeaturesCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionSummaryFeaturesCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionSummaryFeaturesCount.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionSummaryFeaturesCount>() {
           @Override
           public void write(JsonWriter out, SuggestionSummaryFeaturesCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionSummaryFeaturesCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuggestionSummaryFeaturesCount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuggestionSummaryFeaturesCount
  * @throws IOException if the JSON string is invalid with respect to SuggestionSummaryFeaturesCount
  */
  public static SuggestionSummaryFeaturesCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionSummaryFeaturesCount.class);
  }

 /**
  * Convert an instance of SuggestionSummaryFeaturesCount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

