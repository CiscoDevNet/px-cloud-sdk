/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.cisco.px.client.model.SuggestionSummaryAdvisoriesSeverity;
import com.cisco.px.client.model.SuggestionSummaryBugSeverity;
import com.cisco.px.client.model.SuggestionSummaryFeaturesCount;
import com.cisco.px.client.model.SuggestionSummaryFieldNoticeSeverity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SuggestionSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SuggestionSummary {
  public static final String SERIALIZED_NAME_EXPECTED_SOFTWARE_GROUP_RISK = "expectedSoftwareGroupRisk";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SOFTWARE_GROUP_RISK)
  private String expectedSoftwareGroupRisk;

  public static final String SERIALIZED_NAME_EXPECTED_SOFTWARE_GROUP_RISK_CATEGORY = "expectedSoftwareGroupRiskCategory";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SOFTWARE_GROUP_RISK_CATEGORY)
  private String expectedSoftwareGroupRiskCategory;

  public static final String SERIALIZED_NAME_MACHINE_SUGGESTION_ID = "machineSuggestionId";
  @SerializedName(SERIALIZED_NAME_MACHINE_SUGGESTION_ID)
  private String machineSuggestionId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private OffsetDateTime releaseDate;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_NOTES_URL = "releaseNotesUrl";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES_URL)
  private String releaseNotesUrl;

  public static final String SERIALIZED_NAME_BUG_SEVERITY = "bugSeverity";
  @SerializedName(SERIALIZED_NAME_BUG_SEVERITY)
  private SuggestionSummaryBugSeverity bugSeverity;

  public static final String SERIALIZED_NAME_ADVISORIES_SEVERITY = "advisoriesSeverity";
  @SerializedName(SERIALIZED_NAME_ADVISORIES_SEVERITY)
  private SuggestionSummaryAdvisoriesSeverity advisoriesSeverity;

  public static final String SERIALIZED_NAME_FIELD_NOTICE_SEVERITY = "fieldNoticeSeverity";
  @SerializedName(SERIALIZED_NAME_FIELD_NOTICE_SEVERITY)
  private SuggestionSummaryFieldNoticeSeverity fieldNoticeSeverity;

  public static final String SERIALIZED_NAME_FEATURES_COUNT = "featuresCount";
  @SerializedName(SERIALIZED_NAME_FEATURES_COUNT)
  private SuggestionSummaryFeaturesCount featuresCount;

  public SuggestionSummary() {
  }

  public SuggestionSummary expectedSoftwareGroupRisk(String expectedSoftwareGroupRisk) {
    this.expectedSoftwareGroupRisk = expectedSoftwareGroupRisk;
    return this;
  }

   /**
   * Current risk score of the Cisco software release, which is the level of exposure the software release has to bugs, security advisories, and field notices. The risk score is used to make software suggestions intended to minimize risk for assets in the Software Group.
   * @return expectedSoftwareGroupRisk
  **/
  @javax.annotation.Nullable
  public String getExpectedSoftwareGroupRisk() {
    return expectedSoftwareGroupRisk;
  }

  public void setExpectedSoftwareGroupRisk(String expectedSoftwareGroupRisk) {
    this.expectedSoftwareGroupRisk = expectedSoftwareGroupRisk;
  }


  public SuggestionSummary expectedSoftwareGroupRiskCategory(String expectedSoftwareGroupRiskCategory) {
    this.expectedSoftwareGroupRiskCategory = expectedSoftwareGroupRiskCategory;
    return this;
  }

   /**
   * Risk level of the Cisco software release based on its risk score. The risk level can be High, Medium, or Low.
   * @return expectedSoftwareGroupRiskCategory
  **/
  @javax.annotation.Nullable
  public String getExpectedSoftwareGroupRiskCategory() {
    return expectedSoftwareGroupRiskCategory;
  }

  public void setExpectedSoftwareGroupRiskCategory(String expectedSoftwareGroupRiskCategory) {
    this.expectedSoftwareGroupRiskCategory = expectedSoftwareGroupRiskCategory;
  }


  public SuggestionSummary machineSuggestionId(String machineSuggestionId) {
    this.machineSuggestionId = machineSuggestionId;
    return this;
  }

   /**
   * Unique identifier of the suggestion
   * @return machineSuggestionId
  **/
  @javax.annotation.Nullable
  public String getMachineSuggestionId() {
    return machineSuggestionId;
  }

  public void setMachineSuggestionId(String machineSuggestionId) {
    this.machineSuggestionId = machineSuggestionId;
  }


  public SuggestionSummary name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Value that indicates whether the Cisco software release is a current release or one of the suggested release options
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SuggestionSummary releaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Date the Cisco software image was released
   * @return releaseDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(OffsetDateTime releaseDate) {
    this.releaseDate = releaseDate;
  }


  public SuggestionSummary release(String release) {
    this.release = release;
    return this;
  }

   /**
   * Release of the Cisco software
   * @return release
  **/
  @javax.annotation.Nullable
  public String getRelease() {
    return release;
  }

  public void setRelease(String release) {
    this.release = release;
  }


  public SuggestionSummary releaseNotesUrl(String releaseNotesUrl) {
    this.releaseNotesUrl = releaseNotesUrl;
    return this;
  }

   /**
   * Public URL for the release notes of the Cisco software release
   * @return releaseNotesUrl
  **/
  @javax.annotation.Nullable
  public String getReleaseNotesUrl() {
    return releaseNotesUrl;
  }

  public void setReleaseNotesUrl(String releaseNotesUrl) {
    this.releaseNotesUrl = releaseNotesUrl;
  }


  public SuggestionSummary bugSeverity(SuggestionSummaryBugSeverity bugSeverity) {
    this.bugSeverity = bugSeverity;
    return this;
  }

   /**
   * Get bugSeverity
   * @return bugSeverity
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryBugSeverity getBugSeverity() {
    return bugSeverity;
  }

  public void setBugSeverity(SuggestionSummaryBugSeverity bugSeverity) {
    this.bugSeverity = bugSeverity;
  }


  public SuggestionSummary advisoriesSeverity(SuggestionSummaryAdvisoriesSeverity advisoriesSeverity) {
    this.advisoriesSeverity = advisoriesSeverity;
    return this;
  }

   /**
   * Get advisoriesSeverity
   * @return advisoriesSeverity
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryAdvisoriesSeverity getAdvisoriesSeverity() {
    return advisoriesSeverity;
  }

  public void setAdvisoriesSeverity(SuggestionSummaryAdvisoriesSeverity advisoriesSeverity) {
    this.advisoriesSeverity = advisoriesSeverity;
  }


  public SuggestionSummary fieldNoticeSeverity(SuggestionSummaryFieldNoticeSeverity fieldNoticeSeverity) {
    this.fieldNoticeSeverity = fieldNoticeSeverity;
    return this;
  }

   /**
   * Get fieldNoticeSeverity
   * @return fieldNoticeSeverity
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryFieldNoticeSeverity getFieldNoticeSeverity() {
    return fieldNoticeSeverity;
  }

  public void setFieldNoticeSeverity(SuggestionSummaryFieldNoticeSeverity fieldNoticeSeverity) {
    this.fieldNoticeSeverity = fieldNoticeSeverity;
  }


  public SuggestionSummary featuresCount(SuggestionSummaryFeaturesCount featuresCount) {
    this.featuresCount = featuresCount;
    return this;
  }

   /**
   * Get featuresCount
   * @return featuresCount
  **/
  @javax.annotation.Nullable
  public SuggestionSummaryFeaturesCount getFeaturesCount() {
    return featuresCount;
  }

  public void setFeaturesCount(SuggestionSummaryFeaturesCount featuresCount) {
    this.featuresCount = featuresCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestionSummary suggestionSummary = (SuggestionSummary) o;
    return Objects.equals(this.expectedSoftwareGroupRisk, suggestionSummary.expectedSoftwareGroupRisk) &&
        Objects.equals(this.expectedSoftwareGroupRiskCategory, suggestionSummary.expectedSoftwareGroupRiskCategory) &&
        Objects.equals(this.machineSuggestionId, suggestionSummary.machineSuggestionId) &&
        Objects.equals(this.name, suggestionSummary.name) &&
        Objects.equals(this.releaseDate, suggestionSummary.releaseDate) &&
        Objects.equals(this.release, suggestionSummary.release) &&
        Objects.equals(this.releaseNotesUrl, suggestionSummary.releaseNotesUrl) &&
        Objects.equals(this.bugSeverity, suggestionSummary.bugSeverity) &&
        Objects.equals(this.advisoriesSeverity, suggestionSummary.advisoriesSeverity) &&
        Objects.equals(this.fieldNoticeSeverity, suggestionSummary.fieldNoticeSeverity) &&
        Objects.equals(this.featuresCount, suggestionSummary.featuresCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedSoftwareGroupRisk, expectedSoftwareGroupRiskCategory, machineSuggestionId, name, releaseDate, release, releaseNotesUrl, bugSeverity, advisoriesSeverity, fieldNoticeSeverity, featuresCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestionSummary {\n");
    sb.append("    expectedSoftwareGroupRisk: ").append(toIndentedString(expectedSoftwareGroupRisk)).append("\n");
    sb.append("    expectedSoftwareGroupRiskCategory: ").append(toIndentedString(expectedSoftwareGroupRiskCategory)).append("\n");
    sb.append("    machineSuggestionId: ").append(toIndentedString(machineSuggestionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseNotesUrl: ").append(toIndentedString(releaseNotesUrl)).append("\n");
    sb.append("    bugSeverity: ").append(toIndentedString(bugSeverity)).append("\n");
    sb.append("    advisoriesSeverity: ").append(toIndentedString(advisoriesSeverity)).append("\n");
    sb.append("    fieldNoticeSeverity: ").append(toIndentedString(fieldNoticeSeverity)).append("\n");
    sb.append("    featuresCount: ").append(toIndentedString(featuresCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectedSoftwareGroupRisk");
    openapiFields.add("expectedSoftwareGroupRiskCategory");
    openapiFields.add("machineSuggestionId");
    openapiFields.add("name");
    openapiFields.add("releaseDate");
    openapiFields.add("release");
    openapiFields.add("releaseNotesUrl");
    openapiFields.add("bugSeverity");
    openapiFields.add("advisoriesSeverity");
    openapiFields.add("fieldNoticeSeverity");
    openapiFields.add("featuresCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SuggestionSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestionSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestionSummary is not found in the empty JSON string", SuggestionSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestionSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestionSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expectedSoftwareGroupRisk") != null && !jsonObj.get("expectedSoftwareGroupRisk").isJsonNull()) && !jsonObj.get("expectedSoftwareGroupRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedSoftwareGroupRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedSoftwareGroupRisk").toString()));
      }
      if ((jsonObj.get("expectedSoftwareGroupRiskCategory") != null && !jsonObj.get("expectedSoftwareGroupRiskCategory").isJsonNull()) && !jsonObj.get("expectedSoftwareGroupRiskCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedSoftwareGroupRiskCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedSoftwareGroupRiskCategory").toString()));
      }
      if ((jsonObj.get("machineSuggestionId") != null && !jsonObj.get("machineSuggestionId").isJsonNull()) && !jsonObj.get("machineSuggestionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineSuggestionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineSuggestionId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("releaseNotesUrl") != null && !jsonObj.get("releaseNotesUrl").isJsonNull()) && !jsonObj.get("releaseNotesUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `releaseNotesUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("releaseNotesUrl").toString()));
      }
      // validate the optional field `bugSeverity`
      if (jsonObj.get("bugSeverity") != null && !jsonObj.get("bugSeverity").isJsonNull()) {
        SuggestionSummaryBugSeverity.validateJsonElement(jsonObj.get("bugSeverity"));
      }
      // validate the optional field `advisoriesSeverity`
      if (jsonObj.get("advisoriesSeverity") != null && !jsonObj.get("advisoriesSeverity").isJsonNull()) {
        SuggestionSummaryAdvisoriesSeverity.validateJsonElement(jsonObj.get("advisoriesSeverity"));
      }
      // validate the optional field `fieldNoticeSeverity`
      if (jsonObj.get("fieldNoticeSeverity") != null && !jsonObj.get("fieldNoticeSeverity").isJsonNull()) {
        SuggestionSummaryFieldNoticeSeverity.validateJsonElement(jsonObj.get("fieldNoticeSeverity"));
      }
      // validate the optional field `featuresCount`
      if (jsonObj.get("featuresCount") != null && !jsonObj.get("featuresCount").isJsonNull()) {
        SuggestionSummaryFeaturesCount.validateJsonElement(jsonObj.get("featuresCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestionSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestionSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestionSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestionSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestionSummary>() {
           @Override
           public void write(JsonWriter out, SuggestionSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestionSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuggestionSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuggestionSummary
  * @throws IOException if the JSON string is invalid with respect to SuggestionSummary
  */
  public static SuggestionSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestionSummary.class);
  }

 /**
  * Convert an instance of SuggestionSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

