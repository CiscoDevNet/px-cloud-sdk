/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SoftwareGroupFieldNotices
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SoftwareGroupFieldNotices {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_FIELD_NOTICE_ID = "fieldNoticeId";
  @SerializedName(SERIALIZED_NAME_FIELD_NOTICE_ID)
  private String fieldNoticeId;

  public static final String SERIALIZED_NAME_FIRST_PUBLISHED = "firstPublished";
  @SerializedName(SERIALIZED_NAME_FIRST_PUBLISHED)
  private String firstPublished;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public SoftwareGroupFieldNotices() {
  }

  public SoftwareGroupFieldNotices title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the field notice.
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SoftwareGroupFieldNotices state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Status of the field notice. Can be Exposed or Not Exposed.
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public SoftwareGroupFieldNotices fieldNoticeId(String fieldNoticeId) {
    this.fieldNoticeId = fieldNoticeId;
    return this;
  }

   /**
   * Unique identifier of the field notice.
   * @return fieldNoticeId
  **/
  @javax.annotation.Nullable
  public String getFieldNoticeId() {
    return fieldNoticeId;
  }

  public void setFieldNoticeId(String fieldNoticeId) {
    this.fieldNoticeId = fieldNoticeId;
  }


  public SoftwareGroupFieldNotices firstPublished(String firstPublished) {
    this.firstPublished = firstPublished;
    return this;
  }

   /**
   * Published date of the field notice.
   * @return firstPublished
  **/
  @javax.annotation.Nullable
  public String getFirstPublished() {
    return firstPublished;
  }

  public void setFirstPublished(String firstPublished) {
    this.firstPublished = firstPublished;
  }


  public SoftwareGroupFieldNotices lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Last update of the field notice.
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoftwareGroupFieldNotices softwareGroupFieldNotices = (SoftwareGroupFieldNotices) o;
    return Objects.equals(this.title, softwareGroupFieldNotices.title) &&
        Objects.equals(this.state, softwareGroupFieldNotices.state) &&
        Objects.equals(this.fieldNoticeId, softwareGroupFieldNotices.fieldNoticeId) &&
        Objects.equals(this.firstPublished, softwareGroupFieldNotices.firstPublished) &&
        Objects.equals(this.lastUpdated, softwareGroupFieldNotices.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, state, fieldNoticeId, firstPublished, lastUpdated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoftwareGroupFieldNotices {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    fieldNoticeId: ").append(toIndentedString(fieldNoticeId)).append("\n");
    sb.append("    firstPublished: ").append(toIndentedString(firstPublished)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("state");
    openapiFields.add("fieldNoticeId");
    openapiFields.add("firstPublished");
    openapiFields.add("lastUpdated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SoftwareGroupFieldNotices
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoftwareGroupFieldNotices.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoftwareGroupFieldNotices is not found in the empty JSON string", SoftwareGroupFieldNotices.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoftwareGroupFieldNotices.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoftwareGroupFieldNotices` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("fieldNoticeId") != null && !jsonObj.get("fieldNoticeId").isJsonNull()) && !jsonObj.get("fieldNoticeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldNoticeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldNoticeId").toString()));
      }
      if ((jsonObj.get("firstPublished") != null && !jsonObj.get("firstPublished").isJsonNull()) && !jsonObj.get("firstPublished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstPublished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstPublished").toString()));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoftwareGroupFieldNotices.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoftwareGroupFieldNotices' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoftwareGroupFieldNotices> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoftwareGroupFieldNotices.class));

       return (TypeAdapter<T>) new TypeAdapter<SoftwareGroupFieldNotices>() {
           @Override
           public void write(JsonWriter out, SoftwareGroupFieldNotices value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoftwareGroupFieldNotices read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SoftwareGroupFieldNotices given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SoftwareGroupFieldNotices
  * @throws IOException if the JSON string is invalid with respect to SoftwareGroupFieldNotices
  */
  public static SoftwareGroupFieldNotices fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoftwareGroupFieldNotices.class);
  }

 /**
  * Convert an instance of SoftwareGroupFieldNotices to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

