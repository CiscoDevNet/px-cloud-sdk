/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.model;

import java.util.Objects;
import com.cisco.px.client.model.SuccessTrackUsecasesInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.cisco.px.client.JSON;

/**
 * SuccessTrack
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-10T19:31:00.454334Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SuccessTrack {
  public static final String SERIALIZED_NAME_SUCCESS_TRACK = "successTrack";
  @SerializedName(SERIALIZED_NAME_SUCCESS_TRACK)
  private String successTrack;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USECASES = "usecases";
  @SerializedName(SERIALIZED_NAME_USECASES)
  private List<SuccessTrackUsecasesInner> usecases;

  public SuccessTrack() {
  }

  public SuccessTrack successTrack(String successTrack) {
    this.successTrack = successTrack;
    return this;
  }

   /**
   * Get successTrack
   * @return successTrack
  **/
  @javax.annotation.Nullable
  public String getSuccessTrack() {
    return successTrack;
  }

  public void setSuccessTrack(String successTrack) {
    this.successTrack = successTrack;
  }


  public SuccessTrack id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SuccessTrack usecases(List<SuccessTrackUsecasesInner> usecases) {
    this.usecases = usecases;
    return this;
  }

  public SuccessTrack addUsecasesItem(SuccessTrackUsecasesInner usecasesItem) {
    if (this.usecases == null) {
      this.usecases = new ArrayList<>();
    }
    this.usecases.add(usecasesItem);
    return this;
  }

   /**
   * Get usecases
   * @return usecases
  **/
  @javax.annotation.Nullable
  public List<SuccessTrackUsecasesInner> getUsecases() {
    return usecases;
  }

  public void setUsecases(List<SuccessTrackUsecasesInner> usecases) {
    this.usecases = usecases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuccessTrack successTrack = (SuccessTrack) o;
    return Objects.equals(this.successTrack, successTrack.successTrack) &&
        Objects.equals(this.id, successTrack.id) &&
        Objects.equals(this.usecases, successTrack.usecases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(successTrack, id, usecases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuccessTrack {\n");
    sb.append("    successTrack: ").append(toIndentedString(successTrack)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    usecases: ").append(toIndentedString(usecases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("successTrack");
    openapiFields.add("id");
    openapiFields.add("usecases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SuccessTrack
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuccessTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuccessTrack is not found in the empty JSON string", SuccessTrack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuccessTrack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuccessTrack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("successTrack") != null && !jsonObj.get("successTrack").isJsonNull()) && !jsonObj.get("successTrack").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `successTrack` to be a primitive type in the JSON string but got `%s`", jsonObj.get("successTrack").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("usecases") != null && !jsonObj.get("usecases").isJsonNull()) {
        JsonArray jsonArrayusecases = jsonObj.getAsJsonArray("usecases");
        if (jsonArrayusecases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usecases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usecases` to be an array in the JSON string but got `%s`", jsonObj.get("usecases").toString()));
          }

          // validate the optional field `usecases` (array)
          for (int i = 0; i < jsonArrayusecases.size(); i++) {
            SuccessTrackUsecasesInner.validateJsonElement(jsonArrayusecases.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuccessTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuccessTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuccessTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuccessTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<SuccessTrack>() {
           @Override
           public void write(JsonWriter out, SuccessTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuccessTrack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuccessTrack given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuccessTrack
  * @throws IOException if the JSON string is invalid with respect to SuccessTrack
  */
  public static SuccessTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuccessTrack.class);
  }

 /**
  * Convert an instance of SuccessTrack to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

