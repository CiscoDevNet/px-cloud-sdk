/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.api;

import com.cisco.px.client.ApiCallback;
import com.cisco.px.client.ApiClient;
import com.cisco.px.client.ApiException;
import com.cisco.px.client.ApiResponse;
import com.cisco.px.client.Configuration;
import com.cisco.px.client.Pair;
import com.cisco.px.client.ProgressRequestBody;
import com.cisco.px.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cisco.px.client.model.ContractDetailsResponse;
import com.cisco.px.client.model.ContractResponse;
import com.cisco.px.client.model.ContractsV2Response;
import com.cisco.px.client.model.ErrorResponse;
import com.cisco.px.client.model.LicensesPaginationResponse;
import com.cisco.px.client.model.PartnerAssetResponse;
import com.cisco.px.client.model.PartnerOfferWithSessions;
import com.cisco.px.client.model.UniqueContractsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PartnerDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartnerDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PartnerDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getContractDetails
     * @param contractNumber  (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param componentType Deprecated, use &#x60;contractLineItemType&#x60;. (optional)
     * @param contractLineItemType  (optional)
     * @param customerId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractDetailsCall(Integer contractNumber, String successTrackId, Integer max, Integer offset, String componentType, String contractLineItemType, String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contract/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contractNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractNumber", contractNumber));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (componentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("componentType", componentType));
        }

        if (contractLineItemType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractLineItemType", contractLineItemType));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractDetailsValidateBeforeCall(Integer contractNumber, String successTrackId, Integer max, Integer offset, String componentType, String contractLineItemType, String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractNumber' is set
        if (contractNumber == null) {
            throw new ApiException("Missing the required parameter 'contractNumber' when calling getContractDetails(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getContractDetails(Async)");
        }

        return getContractDetailsCall(contractNumber, successTrackId, max, offset, componentType, contractLineItemType, customerId, _callback);

    }

    /**
     * Get customer contract details
     * 
     * @param contractNumber  (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param componentType Deprecated, use &#x60;contractLineItemType&#x60;. (optional)
     * @param contractLineItemType  (optional)
     * @param customerId  (optional)
     * @return ContractDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ContractDetailsResponse getContractDetails(Integer contractNumber, String successTrackId, Integer max, Integer offset, String componentType, String contractLineItemType, String customerId) throws ApiException {
        ApiResponse<ContractDetailsResponse> localVarResp = getContractDetailsWithHttpInfo(contractNumber, successTrackId, max, offset, componentType, contractLineItemType, customerId);
        return localVarResp.getData();
    }

    /**
     * Get customer contract details
     * 
     * @param contractNumber  (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param componentType Deprecated, use &#x60;contractLineItemType&#x60;. (optional)
     * @param contractLineItemType  (optional)
     * @param customerId  (optional)
     * @return ApiResponse&lt;ContractDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractDetailsResponse> getContractDetailsWithHttpInfo(Integer contractNumber, String successTrackId, Integer max, Integer offset, String componentType, String contractLineItemType, String customerId) throws ApiException {
        okhttp3.Call localVarCall = getContractDetailsValidateBeforeCall(contractNumber, successTrackId, max, offset, componentType, contractLineItemType, customerId, null);
        Type localVarReturnType = new TypeToken<ContractDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get customer contract details (asynchronously)
     * 
     * @param contractNumber  (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param componentType Deprecated, use &#x60;contractLineItemType&#x60;. (optional)
     * @param contractLineItemType  (optional)
     * @param customerId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractDetailsAsync(Integer contractNumber, String successTrackId, Integer max, Integer offset, String componentType, String contractLineItemType, String customerId, final ApiCallback<ContractDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractDetailsValidateBeforeCall(contractNumber, successTrackId, max, offset, componentType, contractLineItemType, customerId, _callback);
        Type localVarReturnType = new TypeToken<ContractDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractLicenses
     * @param contractNumber contractNumber (required)
     * @param max  (optional)
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractLicensesCall(String contractNumber, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contract/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (contractNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractNumber", contractNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractLicensesValidateBeforeCall(String contractNumber, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contractNumber' is set
        if (contractNumber == null) {
            throw new ApiException("Missing the required parameter 'contractNumber' when calling getContractLicenses(Async)");
        }

        return getContractLicensesCall(contractNumber, max, offset, _callback);

    }

    /**
     * List of Licenses for the selected Contract
     * 
     * @param contractNumber contractNumber (required)
     * @param max  (optional)
     * @param offset  (optional)
     * @return LicensesPaginationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public LicensesPaginationResponse getContractLicenses(String contractNumber, Integer max, Integer offset) throws ApiException {
        ApiResponse<LicensesPaginationResponse> localVarResp = getContractLicensesWithHttpInfo(contractNumber, max, offset);
        return localVarResp.getData();
    }

    /**
     * List of Licenses for the selected Contract
     * 
     * @param contractNumber contractNumber (required)
     * @param max  (optional)
     * @param offset  (optional)
     * @return ApiResponse&lt;LicensesPaginationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicensesPaginationResponse> getContractLicensesWithHttpInfo(String contractNumber, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getContractLicensesValidateBeforeCall(contractNumber, max, offset, null);
        Type localVarReturnType = new TypeToken<LicensesPaginationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Licenses for the selected Contract (asynchronously)
     * 
     * @param contractNumber contractNumber (required)
     * @param max  (optional)
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractLicensesAsync(String contractNumber, Integer max, Integer offset, final ApiCallback<LicensesPaginationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractLicensesValidateBeforeCall(contractNumber, max, offset, _callback);
        Type localVarReturnType = new TypeToken<LicensesPaginationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContracts
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsCall(Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractsValidateBeforeCall(Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        return getContractsCall(max, offset, _callback);

    }

    /**
     * List customer contracts
     * 
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return ContractResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ContractResponse getContracts(Integer max, Integer offset) throws ApiException {
        ApiResponse<ContractResponse> localVarResp = getContractsWithHttpInfo(max, offset);
        return localVarResp.getData();
    }

    /**
     * List customer contracts
     * 
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return ApiResponse&lt;ContractResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractResponse> getContractsWithHttpInfo(Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getContractsValidateBeforeCall(max, offset, null);
        Type localVarReturnType = new TypeToken<ContractResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List customer contracts (asynchronously)
     * 
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsAsync(Integer max, Integer offset, final ApiCallback<ContractResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractsValidateBeforeCall(max, offset, _callback);
        Type localVarReturnType = new TypeToken<ContractResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContractsWithCustomers
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerGUName customerGUName (optional)
     * @param customerId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsWithCustomersCall(String successTrackId, Integer max, Integer offset, String customerGUName, String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/contractsWithCustomers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (customerGUName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerGUName", customerGUName));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContractsWithCustomersValidateBeforeCall(String successTrackId, Integer max, Integer offset, String customerGUName, String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getContractsWithCustomers(Async)");
        }

        return getContractsWithCustomersCall(successTrackId, max, offset, customerGUName, customerId, _callback);

    }

    /**
     * List contracts with customer details
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerGUName customerGUName (optional)
     * @param customerId  (optional)
     * @return ContractsV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ContractsV2Response getContractsWithCustomers(String successTrackId, Integer max, Integer offset, String customerGUName, String customerId) throws ApiException {
        ApiResponse<ContractsV2Response> localVarResp = getContractsWithCustomersWithHttpInfo(successTrackId, max, offset, customerGUName, customerId);
        return localVarResp.getData();
    }

    /**
     * List contracts with customer details
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerGUName customerGUName (optional)
     * @param customerId  (optional)
     * @return ApiResponse&lt;ContractsV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContractsV2Response> getContractsWithCustomersWithHttpInfo(String successTrackId, Integer max, Integer offset, String customerGUName, String customerId) throws ApiException {
        okhttp3.Call localVarCall = getContractsWithCustomersValidateBeforeCall(successTrackId, max, offset, customerGUName, customerId, null);
        Type localVarReturnType = new TypeToken<ContractsV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List contracts with customer details (asynchronously)
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerGUName customerGUName (optional)
     * @param customerId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContractsWithCustomersAsync(String successTrackId, Integer max, Integer offset, String customerGUName, String customerId, final ApiCallback<ContractsV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContractsWithCustomersValidateBeforeCall(successTrackId, max, offset, customerGUName, customerId, _callback);
        Type localVarReturnType = new TypeToken<ContractsV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartnerOffers
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerOffersCall(String successTrackId, Integer max, Integer offset, String customerId, String offerStatus, String offerType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/partnerOffers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (offerStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerStatus", offerStatus));
        }

        if (offerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerType", offerType));
        }

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartnerOffersValidateBeforeCall(String successTrackId, Integer max, Integer offset, String customerId, String offerStatus, String offerType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getPartnerOffers(Async)");
        }

        return getPartnerOffersCall(successTrackId, max, offset, customerId, offerStatus, offerType, _callback);

    }

    /**
     * List partner offers
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @return PartnerAssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public PartnerAssetResponse getPartnerOffers(String successTrackId, Integer max, Integer offset, String customerId, String offerStatus, String offerType) throws ApiException {
        ApiResponse<PartnerAssetResponse> localVarResp = getPartnerOffersWithHttpInfo(successTrackId, max, offset, customerId, offerStatus, offerType);
        return localVarResp.getData();
    }

    /**
     * List partner offers
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @return ApiResponse&lt;PartnerAssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartnerAssetResponse> getPartnerOffersWithHttpInfo(String successTrackId, Integer max, Integer offset, String customerId, String offerStatus, String offerType) throws ApiException {
        okhttp3.Call localVarCall = getPartnerOffersValidateBeforeCall(successTrackId, max, offset, customerId, offerStatus, offerType, null);
        Type localVarReturnType = new TypeToken<PartnerAssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List partner offers (asynchronously)
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Link - URLs for previous (&#x60;rel&#x3D;\&quot;prev\&quot;&#x60;) and/or next (&#x60;rel&#x3D;\&quot;next\&quot;&#x60;) page of items <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerOffersAsync(String successTrackId, Integer max, Integer offset, String customerId, String offerStatus, String offerType, final ApiCallback<PartnerAssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartnerOffersValidateBeforeCall(successTrackId, max, offset, customerId, offerStatus, offerType, _callback);
        Type localVarReturnType = new TypeToken<PartnerAssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartnerOffersSessions
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerOffersSessionsCall(String successTrackId, Integer max, Integer offset, String customerId, String offerId, String offerStatus, String offerType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/partnerOffersSessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (offerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerId", offerId));
        }

        if (offerStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerStatus", offerStatus));
        }

        if (offerType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offerType", offerType));
        }

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartnerOffersSessionsValidateBeforeCall(String successTrackId, Integer max, Integer offset, String customerId, String offerId, String offerStatus, String offerType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getPartnerOffersSessions(Async)");
        }

        return getPartnerOffersSessionsCall(successTrackId, max, offset, customerId, offerId, offerStatus, offerType, _callback);

    }

    /**
     * Get partner offers session details
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @return PartnerOfferWithSessions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public PartnerOfferWithSessions getPartnerOffersSessions(String successTrackId, Integer max, Integer offset, String customerId, String offerId, String offerStatus, String offerType) throws ApiException {
        ApiResponse<PartnerOfferWithSessions> localVarResp = getPartnerOffersSessionsWithHttpInfo(successTrackId, max, offset, customerId, offerId, offerStatus, offerType);
        return localVarResp.getData();
    }

    /**
     * Get partner offers session details
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @return ApiResponse&lt;PartnerOfferWithSessions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartnerOfferWithSessions> getPartnerOffersSessionsWithHttpInfo(String successTrackId, Integer max, Integer offset, String customerId, String offerId, String offerStatus, String offerType) throws ApiException {
        okhttp3.Call localVarCall = getPartnerOffersSessionsValidateBeforeCall(successTrackId, max, offset, customerId, offerId, offerStatus, offerType, null);
        Type localVarReturnType = new TypeToken<PartnerOfferWithSessions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get partner offers session details (asynchronously)
     * 
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param customerId  (optional)
     * @param offerId  (optional)
     * @param offerStatus  (optional)
     * @param offerType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerOffersSessionsAsync(String successTrackId, Integer max, Integer offset, String customerId, String offerId, String offerStatus, String offerType, final ApiCallback<PartnerOfferWithSessions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartnerOffersSessionsValidateBeforeCall(successTrackId, max, offset, customerId, offerId, offerStatus, offerType, _callback);
        Type localVarReturnType = new TypeToken<PartnerOfferWithSessions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUniqueContractsWithCustomers
     * @param max  (optional)
     * @param offset  (optional)
     * @param customerId customerId (optional)
     * @param customerGUName customerGUName (optional)
     * @param successTrackId successTrackId (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueContractsWithCustomersCall(Integer max, Integer offset, String customerId, String customerGUName, Long successTrackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/uniqueContractsWithCustomers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (customerGUName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerGUName", customerGUName));
        }

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUniqueContractsWithCustomersValidateBeforeCall(Integer max, Integer offset, String customerId, String customerGUName, Long successTrackId, final ApiCallback _callback) throws ApiException {
        return getUniqueContractsWithCustomersCall(max, offset, customerId, customerGUName, successTrackId, _callback);

    }

    /**
     * List of Unique Contracts With Customers
     * 
     * @param max  (optional)
     * @param offset  (optional)
     * @param customerId customerId (optional)
     * @param customerGUName customerGUName (optional)
     * @param successTrackId successTrackId (optional)
     * @return UniqueContractsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public UniqueContractsResponse getUniqueContractsWithCustomers(Integer max, Integer offset, String customerId, String customerGUName, Long successTrackId) throws ApiException {
        ApiResponse<UniqueContractsResponse> localVarResp = getUniqueContractsWithCustomersWithHttpInfo(max, offset, customerId, customerGUName, successTrackId);
        return localVarResp.getData();
    }

    /**
     * List of Unique Contracts With Customers
     * 
     * @param max  (optional)
     * @param offset  (optional)
     * @param customerId customerId (optional)
     * @param customerGUName customerGUName (optional)
     * @param successTrackId successTrackId (optional)
     * @return ApiResponse&lt;UniqueContractsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UniqueContractsResponse> getUniqueContractsWithCustomersWithHttpInfo(Integer max, Integer offset, String customerId, String customerGUName, Long successTrackId) throws ApiException {
        okhttp3.Call localVarCall = getUniqueContractsWithCustomersValidateBeforeCall(max, offset, customerId, customerGUName, successTrackId, null);
        Type localVarReturnType = new TypeToken<UniqueContractsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of Unique Contracts With Customers (asynchronously)
     * 
     * @param max  (optional)
     * @param offset  (optional)
     * @param customerId customerId (optional)
     * @param customerGUName customerGUName (optional)
     * @param successTrackId successTrackId (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully Fetched Contract Details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entity Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error during fetch </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueContractsWithCustomersAsync(Integer max, Integer offset, String customerId, String customerGUName, Long successTrackId, final ApiCallback<UniqueContractsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUniqueContractsWithCustomersValidateBeforeCall(max, offset, customerId, customerGUName, successTrackId, _callback);
        Type localVarReturnType = new TypeToken<UniqueContractsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
