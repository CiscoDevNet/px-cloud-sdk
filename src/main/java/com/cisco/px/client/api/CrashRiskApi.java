/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.api;

import com.cisco.px.client.ApiCallback;
import com.cisco.px.client.ApiClient;
import com.cisco.px.client.ApiException;
import com.cisco.px.client.ApiResponse;
import com.cisco.px.client.Configuration;
import com.cisco.px.client.Pair;
import com.cisco.px.client.ProgressRequestBody;
import com.cisco.px.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cisco.px.client.model.CrashRiskDevices;
import com.cisco.px.client.model.DeviceCrashDetail;
import com.cisco.px.client.model.DeviceRiskFactorsResponse;
import com.cisco.px.client.model.ErrorResponse;
import com.cisco.px.client.model.InventoryCrashDetails;
import com.cisco.px.client.model.SimilarDevices;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CrashRiskApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CrashRiskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CrashRiskApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCrashAssetCrashHistory
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashAssetCrashHistoryCall(String customerId, String assetUniqueId, String successTrackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/crashRisk/asset/{assetUniqueId}/crashHistory"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "assetUniqueId" + "}", localVarApiClient.escapeString(assetUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrashAssetCrashHistoryValidateBeforeCall(String customerId, String assetUniqueId, String successTrackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCrashAssetCrashHistory(Async)");
        }

        // verify the required parameter 'assetUniqueId' is set
        if (assetUniqueId == null) {
            throw new ApiException("Missing the required parameter 'assetUniqueId' when calling getCrashAssetCrashHistory(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getCrashAssetCrashHistory(Async)");
        }

        return getCrashAssetCrashHistoryCall(customerId, assetUniqueId, successTrackId, _callback);

    }

    /**
     * List asset crash history incidents
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @return DeviceCrashDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public DeviceCrashDetail getCrashAssetCrashHistory(String customerId, String assetUniqueId, String successTrackId) throws ApiException {
        ApiResponse<DeviceCrashDetail> localVarResp = getCrashAssetCrashHistoryWithHttpInfo(customerId, assetUniqueId, successTrackId);
        return localVarResp.getData();
    }

    /**
     * List asset crash history incidents
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @return ApiResponse&lt;DeviceCrashDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceCrashDetail> getCrashAssetCrashHistoryWithHttpInfo(String customerId, String assetUniqueId, String successTrackId) throws ApiException {
        okhttp3.Call localVarCall = getCrashAssetCrashHistoryValidateBeforeCall(customerId, assetUniqueId, successTrackId, null);
        Type localVarReturnType = new TypeToken<DeviceCrashDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List asset crash history incidents (asynchronously)
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashAssetCrashHistoryAsync(String customerId, String assetUniqueId, String successTrackId, final ApiCallback<DeviceCrashDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrashAssetCrashHistoryValidateBeforeCall(customerId, assetUniqueId, successTrackId, _callback);
        Type localVarReturnType = new TypeToken<DeviceCrashDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrashRiskAssetRiskFactors
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetRiskFactorsCall(String successTrackId, String customerId, String assetUniqueId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/crashRisk/assets/{assetUniqueId}/riskFactors"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "assetUniqueId" + "}", localVarApiClient.escapeString(assetUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrashRiskAssetRiskFactorsValidateBeforeCall(String successTrackId, String customerId, String assetUniqueId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getCrashRiskAssetRiskFactors(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCrashRiskAssetRiskFactors(Async)");
        }

        // verify the required parameter 'assetUniqueId' is set
        if (assetUniqueId == null) {
            throw new ApiException("Missing the required parameter 'assetUniqueId' when calling getCrashRiskAssetRiskFactors(Async)");
        }

        return getCrashRiskAssetRiskFactorsCall(successTrackId, customerId, assetUniqueId, _callback);

    }

    /**
     * List crash risk asset risk factors
     * List factors that contribute to an asset&#39;s crash risk score.
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @return DeviceRiskFactorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public DeviceRiskFactorsResponse getCrashRiskAssetRiskFactors(String successTrackId, String customerId, String assetUniqueId) throws ApiException {
        ApiResponse<DeviceRiskFactorsResponse> localVarResp = getCrashRiskAssetRiskFactorsWithHttpInfo(successTrackId, customerId, assetUniqueId);
        return localVarResp.getData();
    }

    /**
     * List crash risk asset risk factors
     * List factors that contribute to an asset&#39;s crash risk score.
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @return ApiResponse&lt;DeviceRiskFactorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceRiskFactorsResponse> getCrashRiskAssetRiskFactorsWithHttpInfo(String successTrackId, String customerId, String assetUniqueId) throws ApiException {
        okhttp3.Call localVarCall = getCrashRiskAssetRiskFactorsValidateBeforeCall(successTrackId, customerId, assetUniqueId, null);
        Type localVarReturnType = new TypeToken<DeviceRiskFactorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List crash risk asset risk factors (asynchronously)
     * List factors that contribute to an asset&#39;s crash risk score.
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetRiskFactorsAsync(String successTrackId, String customerId, String assetUniqueId, final ApiCallback<DeviceRiskFactorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrashRiskAssetRiskFactorsValidateBeforeCall(successTrackId, customerId, assetUniqueId, _callback);
        Type localVarReturnType = new TypeToken<DeviceRiskFactorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrashRiskAssetSimilarAssets
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param similarityCriteria Criteria used to determine whether an asset is similar to the specified asset. (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetSimilarAssetsCall(String customerId, String assetUniqueId, String successTrackId, String similarityCriteria, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/crashRisk/assets/{assetUniqueId}/similarAssets"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()))
            .replace("{" + "assetUniqueId" + "}", localVarApiClient.escapeString(assetUniqueId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (similarityCriteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("similarityCriteria", similarityCriteria));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrashRiskAssetSimilarAssetsValidateBeforeCall(String customerId, String assetUniqueId, String successTrackId, String similarityCriteria, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCrashRiskAssetSimilarAssets(Async)");
        }

        // verify the required parameter 'assetUniqueId' is set
        if (assetUniqueId == null) {
            throw new ApiException("Missing the required parameter 'assetUniqueId' when calling getCrashRiskAssetSimilarAssets(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getCrashRiskAssetSimilarAssets(Async)");
        }

        // verify the required parameter 'similarityCriteria' is set
        if (similarityCriteria == null) {
            throw new ApiException("Missing the required parameter 'similarityCriteria' when calling getCrashRiskAssetSimilarAssets(Async)");
        }

        return getCrashRiskAssetSimilarAssetsCall(customerId, assetUniqueId, successTrackId, similarityCriteria, max, offset, _callback);

    }

    /**
     * List crash risk asset similar assets
     * List other devices in the network that are similar to a device in terms of features , product family, and hardware.
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param similarityCriteria Criteria used to determine whether an asset is similar to the specified asset. (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return SimilarDevices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public SimilarDevices getCrashRiskAssetSimilarAssets(String customerId, String assetUniqueId, String successTrackId, String similarityCriteria, Integer max, Integer offset) throws ApiException {
        ApiResponse<SimilarDevices> localVarResp = getCrashRiskAssetSimilarAssetsWithHttpInfo(customerId, assetUniqueId, successTrackId, similarityCriteria, max, offset);
        return localVarResp.getData();
    }

    /**
     * List crash risk asset similar assets
     * List other devices in the network that are similar to a device in terms of features , product family, and hardware.
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param similarityCriteria Criteria used to determine whether an asset is similar to the specified asset. (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return ApiResponse&lt;SimilarDevices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimilarDevices> getCrashRiskAssetSimilarAssetsWithHttpInfo(String customerId, String assetUniqueId, String successTrackId, String similarityCriteria, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCrashRiskAssetSimilarAssetsValidateBeforeCall(customerId, assetUniqueId, successTrackId, similarityCriteria, max, offset, null);
        Type localVarReturnType = new TypeToken<SimilarDevices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List crash risk asset similar assets (asynchronously)
     * List other devices in the network that are similar to a device in terms of features , product family, and hardware.
     * @param customerId Unique identifier of the customer (required)
     * @param assetUniqueId assetId encoded as a Base64 string. This parameter is available as a response parameter of the /crashRisk/assets API (required)
     * @param successTrackId  (required)
     * @param similarityCriteria Criteria used to determine whether an asset is similar to the specified asset. (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetSimilarAssetsAsync(String customerId, String assetUniqueId, String successTrackId, String similarityCriteria, Integer max, Integer offset, final ApiCallback<SimilarDevices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrashRiskAssetSimilarAssetsValidateBeforeCall(customerId, assetUniqueId, successTrackId, similarityCriteria, max, offset, _callback);
        Type localVarReturnType = new TypeToken<SimilarDevices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCrashRiskAssets
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetsCall(String customerId, String successTrackId, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/crashRisk/assets"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCrashRiskAssetsValidateBeforeCall(String customerId, String successTrackId, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCrashRiskAssets(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getCrashRiskAssets(Async)");
        }

        return getCrashRiskAssetsCall(customerId, successTrackId, max, offset, _callback);

    }

    /**
     * List assets at risk of crashing
     * List devices that have a probability of crash, including risk score rating (&#x60;High&#x60;, &#x60;Medium&#x60;, &#x60;Low&#x60;).
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return CrashRiskDevices
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public CrashRiskDevices getCrashRiskAssets(String customerId, String successTrackId, Integer max, Integer offset) throws ApiException {
        ApiResponse<CrashRiskDevices> localVarResp = getCrashRiskAssetsWithHttpInfo(customerId, successTrackId, max, offset);
        return localVarResp.getData();
    }

    /**
     * List assets at risk of crashing
     * List devices that have a probability of crash, including risk score rating (&#x60;High&#x60;, &#x60;Medium&#x60;, &#x60;Low&#x60;).
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return ApiResponse&lt;CrashRiskDevices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CrashRiskDevices> getCrashRiskAssetsWithHttpInfo(String customerId, String successTrackId, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getCrashRiskAssetsValidateBeforeCall(customerId, successTrackId, max, offset, null);
        Type localVarReturnType = new TypeToken<CrashRiskDevices>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List assets at risk of crashing (asynchronously)
     * List devices that have a probability of crash, including risk score rating (&#x60;High&#x60;, &#x60;Medium&#x60;, &#x60;Low&#x60;).
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCrashRiskAssetsAsync(String customerId, String successTrackId, Integer max, Integer offset, final ApiCallback<CrashRiskDevices> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCrashRiskAssetsValidateBeforeCall(customerId, successTrackId, max, offset, _callback);
        Type localVarReturnType = new TypeToken<CrashRiskDevices>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCrashRiskAssetsCrashed
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param timePeriod Filter results by X number of days in the past - valid range 1-99. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCrashRiskAssetsCrashedCall(String customerId, String successTrackId, Integer timePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/crashRisk/assetsCrashed"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (timePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timePeriod", timePeriod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCrashRiskAssetsCrashedValidateBeforeCall(String customerId, String successTrackId, Integer timePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling listCrashRiskAssetsCrashed(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling listCrashRiskAssetsCrashed(Async)");
        }

        return listCrashRiskAssetsCrashedCall(customerId, successTrackId, timePeriod, _callback);

    }

    /**
     * List assets which have crashed
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param timePeriod Filter results by X number of days in the past - valid range 1-99. (optional)
     * @return InventoryCrashDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public InventoryCrashDetails listCrashRiskAssetsCrashed(String customerId, String successTrackId, Integer timePeriod) throws ApiException {
        ApiResponse<InventoryCrashDetails> localVarResp = listCrashRiskAssetsCrashedWithHttpInfo(customerId, successTrackId, timePeriod);
        return localVarResp.getData();
    }

    /**
     * List assets which have crashed
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param timePeriod Filter results by X number of days in the past - valid range 1-99. (optional)
     * @return ApiResponse&lt;InventoryCrashDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InventoryCrashDetails> listCrashRiskAssetsCrashedWithHttpInfo(String customerId, String successTrackId, Integer timePeriod) throws ApiException {
        okhttp3.Call localVarCall = listCrashRiskAssetsCrashedValidateBeforeCall(customerId, successTrackId, timePeriod, null);
        Type localVarReturnType = new TypeToken<InventoryCrashDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List assets which have crashed (asynchronously)
     * 
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param timePeriod Filter results by X number of days in the past - valid range 1-99. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCrashRiskAssetsCrashedAsync(String customerId, String successTrackId, Integer timePeriod, final ApiCallback<InventoryCrashDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCrashRiskAssetsCrashedValidateBeforeCall(customerId, successTrackId, timePeriod, _callback);
        Type localVarReturnType = new TypeToken<InventoryCrashDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
