/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.api;

import com.cisco.px.client.ApiCallback;
import com.cisco.px.client.ApiClient;
import com.cisco.px.client.ApiException;
import com.cisco.px.client.ApiResponse;
import com.cisco.px.client.Configuration;
import com.cisco.px.client.Pair;
import com.cisco.px.client.ProgressRequestBody;
import com.cisco.px.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cisco.px.client.model.AssetResponse;
import com.cisco.px.client.model.ErrorResponse;
import com.cisco.px.client.model.SoftwareGroupBugsResponse;
import com.cisco.px.client.model.SoftwareGroupFieldNoticesResponse;
import com.cisco.px.client.model.SoftwareGroupResponse;
import com.cisco.px.client.model.SoftwareGroupSuggestions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InsightsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InsightsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getSoftwareGroupAssets
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param softwareGroupId Unique identifier used in CX Cloud to identify the Software Group (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupAssetsCall(String customerId, String successTrackId, String softwareGroupId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups/assets"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (softwareGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softwareGroupId", softwareGroupId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupAssetsValidateBeforeCall(String customerId, String successTrackId, String softwareGroupId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroupAssets(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroupAssets(Async)");
        }

        // verify the required parameter 'softwareGroupId' is set
        if (softwareGroupId == null) {
            throw new ApiException("Missing the required parameter 'softwareGroupId' when calling getSoftwareGroupAssets(Async)");
        }

        return getSoftwareGroupAssetsCall(customerId, successTrackId, softwareGroupId, offset, max, _callback);

    }

    /**
     * List Asset information in the Software Group
     * Returns information about assets in the Software Group based on the customerId and softwareGroupId provided
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param softwareGroupId Unique identifier used in CX Cloud to identify the Software Group (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return AssetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public AssetResponse getSoftwareGroupAssets(String customerId, String successTrackId, String softwareGroupId, Integer offset, Integer max) throws ApiException {
        ApiResponse<AssetResponse> localVarResp = getSoftwareGroupAssetsWithHttpInfo(customerId, successTrackId, softwareGroupId, offset, max);
        return localVarResp.getData();
    }

    /**
     * List Asset information in the Software Group
     * Returns information about assets in the Software Group based on the customerId and softwareGroupId provided
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param softwareGroupId Unique identifier used in CX Cloud to identify the Software Group (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return ApiResponse&lt;AssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetResponse> getSoftwareGroupAssetsWithHttpInfo(String customerId, String successTrackId, String softwareGroupId, Integer offset, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupAssetsValidateBeforeCall(customerId, successTrackId, softwareGroupId, offset, max, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Asset information in the Software Group (asynchronously)
     * Returns information about assets in the Software Group based on the customerId and softwareGroupId provided
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param softwareGroupId Unique identifier used in CX Cloud to identify the Software Group (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupAssetsAsync(String customerId, String successTrackId, String softwareGroupId, Integer offset, Integer max, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupAssetsValidateBeforeCall(customerId, successTrackId, softwareGroupId, offset, max, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoftwareGroupFieldNotices
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupFieldNoticesCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/fieldNotices"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (machineSuggestionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("machineSuggestionId", machineSuggestionId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupFieldNoticesValidateBeforeCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroupFieldNotices(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroupFieldNotices(Async)");
        }

        // verify the required parameter 'machineSuggestionId' is set
        if (machineSuggestionId == null) {
            throw new ApiException("Missing the required parameter 'machineSuggestionId' when calling getSoftwareGroupFieldNotices(Async)");
        }

        return getSoftwareGroupFieldNoticesCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);

    }

    /**
     * List info on Software Group - Suggestions Field Notices
     * Returns field notice information, including ID number, title, and publish date.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return SoftwareGroupFieldNoticesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareGroupFieldNoticesResponse getSoftwareGroupFieldNotices(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        ApiResponse<SoftwareGroupFieldNoticesResponse> localVarResp = getSoftwareGroupFieldNoticesWithHttpInfo(customerId, successTrackId, machineSuggestionId, offset, max);
        return localVarResp.getData();
    }

    /**
     * List info on Software Group - Suggestions Field Notices
     * Returns field notice information, including ID number, title, and publish date.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return ApiResponse&lt;SoftwareGroupFieldNoticesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareGroupFieldNoticesResponse> getSoftwareGroupFieldNoticesWithHttpInfo(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupFieldNoticesValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, null);
        Type localVarReturnType = new TypeToken<SoftwareGroupFieldNoticesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List info on Software Group - Suggestions Field Notices (asynchronously)
     * Returns field notice information, including ID number, title, and publish date.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupFieldNoticesAsync(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback<SoftwareGroupFieldNoticesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupFieldNoticesValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);
        Type localVarReturnType = new TypeToken<SoftwareGroupFieldNoticesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoftwareGroupSecurityAdvisories
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSecurityAdvisoriesCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/securityAdvisories"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (machineSuggestionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("machineSuggestionId", machineSuggestionId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupSecurityAdvisoriesValidateBeforeCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroupSecurityAdvisories(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroupSecurityAdvisories(Async)");
        }

        // verify the required parameter 'machineSuggestionId' is set
        if (machineSuggestionId == null) {
            throw new ApiException("Missing the required parameter 'machineSuggestionId' when calling getSoftwareGroupSecurityAdvisories(Async)");
        }

        return getSoftwareGroupSecurityAdvisoriesCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);

    }

    /**
     * List info on Software Group - Suggestions Security Advisories
     * Returns software advisory information, including ID number, version number, and severity level.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return SoftwareGroupFieldNoticesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareGroupFieldNoticesResponse getSoftwareGroupSecurityAdvisories(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        ApiResponse<SoftwareGroupFieldNoticesResponse> localVarResp = getSoftwareGroupSecurityAdvisoriesWithHttpInfo(customerId, successTrackId, machineSuggestionId, offset, max);
        return localVarResp.getData();
    }

    /**
     * List info on Software Group - Suggestions Security Advisories
     * Returns software advisory information, including ID number, version number, and severity level.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return ApiResponse&lt;SoftwareGroupFieldNoticesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareGroupFieldNoticesResponse> getSoftwareGroupSecurityAdvisoriesWithHttpInfo(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupSecurityAdvisoriesValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, null);
        Type localVarReturnType = new TypeToken<SoftwareGroupFieldNoticesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List info on Software Group - Suggestions Security Advisories (asynchronously)
     * Returns software advisory information, including ID number, version number, and severity level.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSecurityAdvisoriesAsync(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback<SoftwareGroupFieldNoticesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupSecurityAdvisoriesValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);
        Type localVarReturnType = new TypeToken<SoftwareGroupFieldNoticesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoftwareGroupSuggestions
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param suggestionId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSuggestionsCall(String successTrackId, String customerId, String suggestionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups/suggestions"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (suggestionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("suggestionId", suggestionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupSuggestionsValidateBeforeCall(String successTrackId, String customerId, String suggestionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroupSuggestions(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroupSuggestions(Async)");
        }

        // verify the required parameter 'suggestionId' is set
        if (suggestionId == null) {
            throw new ApiException("Missing the required parameter 'suggestionId' when calling getSoftwareGroupSuggestions(Async)");
        }

        return getSoftwareGroupSuggestionsCall(successTrackId, customerId, suggestionId, _callback);

    }

    /**
     * List Software Group Suggestions
     * Returns Software Group suggestions, including detailed information about Cisco software release recommendations and current Cisco software releases running on assets in the Software Group
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param suggestionId  (required)
     * @return SoftwareGroupSuggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareGroupSuggestions getSoftwareGroupSuggestions(String successTrackId, String customerId, String suggestionId) throws ApiException {
        ApiResponse<SoftwareGroupSuggestions> localVarResp = getSoftwareGroupSuggestionsWithHttpInfo(successTrackId, customerId, suggestionId);
        return localVarResp.getData();
    }

    /**
     * List Software Group Suggestions
     * Returns Software Group suggestions, including detailed information about Cisco software release recommendations and current Cisco software releases running on assets in the Software Group
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param suggestionId  (required)
     * @return ApiResponse&lt;SoftwareGroupSuggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareGroupSuggestions> getSoftwareGroupSuggestionsWithHttpInfo(String successTrackId, String customerId, String suggestionId) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupSuggestionsValidateBeforeCall(successTrackId, customerId, suggestionId, null);
        Type localVarReturnType = new TypeToken<SoftwareGroupSuggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Software Group Suggestions (asynchronously)
     * Returns Software Group suggestions, including detailed information about Cisco software release recommendations and current Cisco software releases running on assets in the Software Group
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param suggestionId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSuggestionsAsync(String successTrackId, String customerId, String suggestionId, final ApiCallback<SoftwareGroupSuggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupSuggestionsValidateBeforeCall(successTrackId, customerId, suggestionId, _callback);
        Type localVarReturnType = new TypeToken<SoftwareGroupSuggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoftwareGroupSuggestionsBugs
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSuggestionsBugsCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/bugs"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (machineSuggestionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("machineSuggestionId", machineSuggestionId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupSuggestionsBugsValidateBeforeCall(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroupSuggestionsBugs(Async)");
        }

        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroupSuggestionsBugs(Async)");
        }

        // verify the required parameter 'machineSuggestionId' is set
        if (machineSuggestionId == null) {
            throw new ApiException("Missing the required parameter 'machineSuggestionId' when calling getSoftwareGroupSuggestionsBugs(Async)");
        }

        return getSoftwareGroupSuggestionsBugsCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);

    }

    /**
     * List info on Software Group - Suggestions Bugs
     * Returns information on bugs, including ID, description, and affected software releases.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return SoftwareGroupBugsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareGroupBugsResponse getSoftwareGroupSuggestionsBugs(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        ApiResponse<SoftwareGroupBugsResponse> localVarResp = getSoftwareGroupSuggestionsBugsWithHttpInfo(customerId, successTrackId, machineSuggestionId, offset, max);
        return localVarResp.getData();
    }

    /**
     * List info on Software Group - Suggestions Bugs
     * Returns information on bugs, including ID, description, and affected software releases.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @return ApiResponse&lt;SoftwareGroupBugsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareGroupBugsResponse> getSoftwareGroupSuggestionsBugsWithHttpInfo(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupSuggestionsBugsValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, null);
        Type localVarReturnType = new TypeToken<SoftwareGroupBugsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List info on Software Group - Suggestions Bugs (asynchronously)
     * Returns information on bugs, including ID, description, and affected software releases.
     * @param customerId Unique identifier of the customer (required)
     * @param successTrackId  (required)
     * @param machineSuggestionId  (required)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupSuggestionsBugsAsync(String customerId, String successTrackId, String machineSuggestionId, Integer offset, Integer max, final ApiCallback<SoftwareGroupBugsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupSuggestionsBugsValidateBeforeCall(customerId, successTrackId, machineSuggestionId, offset, max, _callback);
        Type localVarReturnType = new TypeToken<SoftwareGroupBugsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSoftwareGroups
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupsCall(String successTrackId, String customerId, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customers/{customerId}/insights/software/softwareGroups"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (successTrackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("successTrackId", successTrackId));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSoftwareGroupsValidateBeforeCall(String successTrackId, String customerId, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'successTrackId' is set
        if (successTrackId == null) {
            throw new ApiException("Missing the required parameter 'successTrackId' when calling getSoftwareGroups(Async)");
        }

        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getSoftwareGroups(Async)");
        }

        return getSoftwareGroupsCall(successTrackId, customerId, max, offset, _callback);

    }

    /**
     * fetch Software Group Information
     * Returns Software Group information for the customerId provided
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return SoftwareGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public SoftwareGroupResponse getSoftwareGroups(String successTrackId, String customerId, Integer max, Integer offset) throws ApiException {
        ApiResponse<SoftwareGroupResponse> localVarResp = getSoftwareGroupsWithHttpInfo(successTrackId, customerId, max, offset);
        return localVarResp.getData();
    }

    /**
     * fetch Software Group Information
     * Returns Software Group information for the customerId provided
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @return ApiResponse&lt;SoftwareGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SoftwareGroupResponse> getSoftwareGroupsWithHttpInfo(String successTrackId, String customerId, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getSoftwareGroupsValidateBeforeCall(successTrackId, customerId, max, offset, null);
        Type localVarReturnType = new TypeToken<SoftwareGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * fetch Software Group Information (asynchronously)
     * Returns Software Group information for the customerId provided
     * @param successTrackId  (required)
     * @param customerId Unique identifier of the customer (required)
     * @param max The maximum number of items to return. The default value is 10. (optional, default to 10)
     * @param offset The number of items to skip before starting to collect the result set. The default value is 1. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway timeout </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSoftwareGroupsAsync(String successTrackId, String customerId, Integer max, Integer offset, final ApiCallback<SoftwareGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSoftwareGroupsValidateBeforeCall(successTrackId, customerId, max, offset, _callback);
        Type localVarReturnType = new TypeToken<SoftwareGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
