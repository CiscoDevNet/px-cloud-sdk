/*
 * PX Cloud for Success Tracks API
 * PX Cloud for Success Tracks API
 *
 * The version of the OpenAPI document: 0.9.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.cisco.px.client.api;

import com.cisco.px.client.ApiException;
import com.cisco.px.client.model.AssetViolationsResponse;
import com.cisco.px.client.model.AssetsViolationsResponse;
import com.cisco.px.client.model.AssetsWithViolationsResponse;
import com.cisco.px.client.model.ErrorResponse;
import com.cisco.px.client.model.OptInResponse;
import com.cisco.px.client.model.PolicyRuleDetails;
import com.cisco.px.client.model.SuggestionsResponse;
import com.cisco.px.client.model.ViolationSummaryResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComplianceApi
 */
@Disabled
public class ComplianceApiTest {

    private final ComplianceApi api = new ComplianceApi();

    /**
     * List the violations of the asset
     *
     * Returns information about the rules violated by an asset based on the customer and asset information provided. Default is ruleSeverityId(desc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetViolationsTest() throws ApiException {
        String successTrackId = null;
        String sourceSystemId = null;
        String customerId = null;
        String assetId = null;
        Integer offset = null;
        Integer max = null;
        AssetViolationsResponse response = api.getAssetViolations(successTrackId, sourceSystemId, customerId, assetId, offset, max);
        // TODO: test validations
    }

    /**
     * Fetch the asset summary
     *
     * Returns information about assets that have at least one rule violation based on the customerId provided. Default is severityId(desc), violationCount(desc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetsWithViolationsTest() throws ApiException {
        String successTrackId = null;
        String customerId = null;
        Integer offset = null;
        Integer max = null;
        AssetsWithViolationsResponse response = api.getAssetsWithViolations(successTrackId, customerId, offset, max);
        // TODO: test validations
    }

    /**
     * Fetch optIn status
     *
     * Returns information about whether the customer has successfully configured the regulatory compliance feature and has assets that are qualified to be checked.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOptInTest() throws ApiException {
        String successTrackId = null;
        String customerId = null;
        OptInResponse response = api.getOptIn(successTrackId, customerId);
        // TODO: test validations
    }

    /**
     * Fetch information about the policy the rule belongs to
     *
     * Returns information about the policy the rule belongs to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPolicyRuleDetailsTest() throws ApiException {
        String successTrackId = null;
        String customerId = null;
        String policyCategory = null;
        String policyGroupId = null;
        String policyId = null;
        String ruleId = null;
        String severity = null;
        PolicyRuleDetails response = api.getPolicyRuleDetails(successTrackId, customerId, policyCategory, policyGroupId, policyId, ruleId, severity);
        // TODO: test validations
    }

    /**
     * Get the Suggestions filtered upon Severity (if given), for summary tab
     *
     * Returns information about the violated rule conditions, including suggested remediation steps, based on the customer, policy, and rule information provided. Default sorting is severityId(desc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSuggestionsTest() throws ApiException {
        String policyCategory = null;
        String successTrackId = null;
        String customerId = null;
        String policyGroupId = null;
        String policyId = null;
        String ruleId = null;
        Integer offset = null;
        Integer max = null;
        SuggestionsResponse response = api.getSuggestions(policyCategory, successTrackId, customerId, policyGroupId, policyId, ruleId, offset, max);
        // TODO: test validations
    }

    /**
     * Fetch the violation summary of a customer
     *
     * Returns information about the rules violated for the customerId provided Default sorting is, severityId(asc), violationCount(desc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViolationsTest() throws ApiException {
        String successTrackId = null;
        String customerId = null;
        Integer offset = null;
        Integer max = null;
        ViolationSummaryResponse response = api.getViolations(successTrackId, customerId, offset, max);
        // TODO: test validations
    }

    /**
     * Fetch the violation details of impacted assets for the customer, and selected policy Group, Policy and Rule
     *
     * Returns information about the customer assets in violation of the rule based on the customer, policy, and rule information provided. Default sorting is, assetName(asc)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getViolationsAssetsTest() throws ApiException {
        String successTrackId = null;
        String customerId = null;
        String policyCategory = null;
        String policyGroupId = null;
        String policyId = null;
        String ruleId = null;
        String severity = null;
        Integer offset = null;
        Integer max = null;
        AssetsViolationsResponse response = api.getViolationsAssets(successTrackId, customerId, policyCategory, policyGroupId, policyId, ruleId, severity, offset, max);
        // TODO: test validations
    }

}
